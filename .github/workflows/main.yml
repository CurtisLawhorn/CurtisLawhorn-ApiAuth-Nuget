name: Build and Publish # Build and publish NuGet Package to AWS CodeArtifact

on:
  push:
    tags:
      - 'v*' # runs only when tags like v1.0.1, v2.1.3 are pushed
  workflow_dispatch: # runs manually

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write # allows creating releases
      id-token: write # needed for AWS OIDC

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # üîé Verify tag matches .csproj version
      - name: Verify tag matches version in .csproj
        shell: bash
        env:
          CSProj_File: ${{ vars.CSPROJ_FILE }}
        run: |
          if [ ! -f "$CSProj_File" ]; then
            echo "‚ùå $CSProj_File not found!"
            exit 1
          fi

          # Extract version from .csproj
          csproj_version=$(grep -oPm1 "<(PackageVersion|Version)>([^<]+)</\1>" "$CSProj_File" | sed -E "s/<(PackageVersion|Version)>([^<]+)<\/\1>/\2/")

          # Remove leading "v" from tag
          tag_version="${GITHUB_REF_NAME#v}"

          echo "Tag version: $tag_version"
          echo "Project version: $csproj_version"

          if [ "$tag_version" != "$csproj_version" ]; then
            echo "‚ùå Version mismatch! Tag ($tag_version) does not match $CSProj_File ($csproj_version)"
            exit 1
          fi

          echo "‚úÖ Version check passed"
          echo "TAG_VERSION=$tag_version" >> $GITHUB_ENV

      # 3Ô∏è‚É£ Restore dependencies
      - name: Restore
        run: dotnet restore

      # 4Ô∏è‚É£ Build project
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # 5Ô∏è‚É£ Run tests
      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

      # ‚úÖ Enforce minimum code and branch coverage (threshold from env)
      - name: Enforce minimum code and branch coverage
        shell: bash
        env:
          Test_Coverage: ${{ vars.TEST_COVERAGE }}
        run: |
          coverage_file=$(find . -type f -name 'coverage.cobertura.xml' | head -n 1)
          if [ -z "$coverage_file" ]; then
            echo "‚ùå Coverage file not found!"
            exit 1
          fi

          # Extract line-rate and branch-rate from Cobertura XML
          line_rate=$(grep -o 'line-rate="[0-9.]*"' "$coverage_file" | head -n 1 | sed 's/line-rate="//;s/"//')
          branch_rate=$(grep -o 'branch-rate="[0-9.]*"' "$coverage_file" | head -n 1 | sed 's/branch-rate="//;s/"//')
          coverage_percent=$(awk "BEGIN {print $line_rate * 100}")
          branch_percent=$(awk "BEGIN {print $branch_rate * 100}")

          echo "Line coverage: $coverage_percent%"
          echo "Branch coverage: $branch_percent%"
          echo "Required minimum: ${Test_Coverage}%"

          # Fail if either coverage is less than threshold
          if (( $(echo "$coverage_percent < $Test_Coverage" | bc -l) )); then
            echo "‚ùå Line coverage ($coverage_percent%) is below ${Test_Coverage}%!"
            exit 1
          fi

          if (( $(echo "$branch_percent < $Test_Coverage" | bc -l) )); then
            echo "‚ùå Branch coverage ($branch_percent%) is below ${Test_Coverage}%!"
            exit 1
          fi

          echo "‚úÖ Code coverage ($coverage_percent%) and branch coverage ($branch_percent%) meet minimum requirement."

      # 6Ô∏è‚É£ Pack NuGet package (forces .csproj version for consistency)
      - name: Pack NuGet
        run: dotnet pack --configuration Release --no-build -o ./artifacts /p:PackageVersion=${{ env.TAG_VERSION }}

      # 7Ô∏è‚É£ Configure AWS credentials using OIDC role
      - name: Configure AWS credentials
        env:
          AWS_Region: ${{ vars.AWS_REGION }}
          AWS_Role: ${{ vars.AWS_ROLE }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_Role }}
          aws-region: ${{ env.AWS_Region }}

      # 8Ô∏è‚É£ Authenticate to CodeArtifact
      - name: Authenticate to CodeArtifact
        env: # repo-level variables
          AWS_CodeArtifact_Domain: ${{ vars.AWS_CODEARTIFACT_DOMAIN }}
          AWS_CodeArtifact_DomainOwner: ${{ vars.AWS_CODEARTIFACT_DOMAINOWNER }}
          AWS_CodeArtifact_NugetSource: ${{ vars.AWS_CODEARTIFACT_NUGETSOURCE }}
        run: |
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
            --domain "$AWS_CodeArtifact_Domain" \
            --domain-owner "$AWS_CodeArtifact_DomainOwner" \
            --query authorizationToken \
            --output text)

          # Add NuGet source using the token
          dotnet nuget remove source aws-codeartifact || true
          dotnet nuget add source \
            --name aws-codeartifact \
            --username aws \
            --password $CODEARTIFACT_AUTH_TOKEN \
            --store-password-in-clear-text \
            "$AWS_CodeArtifact_NugetSource"

      # 9Ô∏è‚É£ Push NuGet package to CodeArtifact
      - name: Push package to CodeArtifact
        run: dotnet nuget push ./artifacts/*.nupkg --source aws-codeartifact --skip-duplicate

      # üîü Create GitHub Release (uses full v1.2.3 tag)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: ./artifacts/*.nupkg
